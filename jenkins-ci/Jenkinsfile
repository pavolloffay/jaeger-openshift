pipeline {
    agent any

    options {
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        JAEGER_QUERY_HOST="jaeger-query"
        JAEGER_AGENT_HOST="jaeger-agent"
        JAEGER_COLLECTOR_HOST="jaeger-collector"
        JAEGER_PORT_QUERY_HTTP=80
        JAEGER_PORT_AGENT_ZIPKIN_THRIFT=5775
        JAEGER_PORT_AGENT_COMPACT=6831
        JAEGER_PORT_AGENT_BINARY=6832
        JAEGER_PORT_ZIPKIN_COLLECTOR=14268
    }
    stages {
        stage('all-in-one: clean environment') {
            steps {
                sh 'oc delete all,template,daemonset,configmap -l jaeger-infra'
            }
        }
        stage('all-in-one: deploy Jaeger') {
            steps {
                checkout scm
                sh 'oc process -f all-in-one/jaeger-all-in-one-template.yml | oc create -f -'
            }
        }
        stage('all-in-one: verify services'){
            steps{
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-query', verbose: 'false'
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-collector', verbose: 'false'
            }
        }
        stage('all-in-one: functional test'){
            steps{
                withEnv(["JAVA_HOME=${ tool 'jdk8' }", "PATH+MAVEN=${tool 'maven-3.5.2'}/bin:${env.JAVA_HOME}/bin"]) {
                    sh '''
                        export USE_COLLECTOR_OR_AGENT=agent
                        rm ./jaeger-java-test -rf
                        git clone https://github.com/Hawkular-QE/jaeger-java-test.git
                        cd jaeger-java-test
                        mvn clean test
                    '''
                }
            }
        }
        stage('all-in-one: delete all') {
            steps {
                sh 'oc delete all,template,daemonset,configmap -l jaeger-infra'
            }
        }
        stage('production-cassandra: deploy Cassandra') {
            steps {
                sh 'oc create -f production/cassandra.yml'
            }
        }
        /* TODO if possible verify Cassandra deployment before proceeding  */
        stage('production-cassandra: deploy Jaeger') {
            steps {
                sh 'oc create -f production/configmap-cassandra.yml'
                sh 'oc process -f production/jaeger-production-template.yml | oc create -f -'
            }
        }
        stage('production-cassandra: verify Jaeger services'){
            steps{
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-collector', verbose: 'false'
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-query', verbose: 'false'
            }
        }
        stage('production-cassandra: functional test'){
            steps{
                withEnv(["JAVA_HOME=${ tool 'jdk8' }", "PATH+MAVEN=${tool 'maven-3.5.2'}/bin:${env.JAVA_HOME}/bin"]) {
                sh '''
                    export USE_COLLECTOR_OR_AGENT=collector
                    rm ./jaeger-java-test -rf
                    git clone https://github.com/Hawkular-QE/jaeger-java-test.git
                    export JAEGER_FLUSH_INTERVAL=2500
                    cd jaeger-java-test
                    mvn clean test
                '''
                }
            }
        }
        stage('production-cassandra: delete all') {
            steps {
                sh 'oc delete all,template,daemonset,configmap -l jaeger-infra'
            }
        }
        stage('production-elastic: deploy elasticsearch') {
            steps {
                sh 'oc delete all,template,daemonset,configmap -l elasticsearch'
                sh 'oc delete all,template,daemonset,configmap -l elasticsearch-cluster'
                sh 'oc create -f https://raw.githubusercontent.com/RHsyseng/docker-rhel-elasticsearch/5.x/es-cluster-deployment.yml'
            }
        }
        stage('production-elastic: deploy Jaeger') {
            steps {
                sh 'oc create -f production/configmap-elasticsearch.yml'
                sh 'oc process -f production/jaeger-production-template.yml | oc create -f -'
            }
        }
        stage('production-elastic: verify Jaeger services'){
            steps{
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-collector', verbose: 'false'
                openshiftVerifyService apiURL: '', authToken: '', namespace: '', svcName: 'jaeger-query', verbose: 'false'
            }
        }
        stage('production-elastic: functional test'){
            steps{
                withEnv(["JAVA_HOME=${ tool 'jdk8' }", "PATH+MAVEN=${tool 'maven-3.5.2'}/bin:${env.JAVA_HOME}/bin"]) {
                    sh '''
                        export USE_COLLECTOR_OR_AGENT=collector
                        rm ./jaeger-java-test -rf
                        git clone https://github.com/Hawkular-QE/jaeger-java-test.git
                        cd jaeger-java-test
                        export JAEGER_FLUSH_INTERVAL=2500
                        mvn clean test
                    '''
                }
            }
        }
        stage('production-elastic: delete all') {
            steps {
                sh 'oc delete all,template,daemonset,configmap -l elasticsearch'
                sh 'oc delete all,template,daemonset,configmap -l elasticsearch-cluster'
                sh 'oc delete all,template,daemonset,configmap -l jaeger-infra'
            }
        }
    }

  post {
    always {
      sh '''
        chmod +x jenkins-ci/push-logs.sh
      '''
      }
    failure {
      withCredentials([usernameColonPassword(credentialsId: 'jaegertracing_gh_token', variable: 'AUTHTOKEN')]) {
        sh '''
          cd jenkins-ci
          ./push-logs.sh "FAILURE"
        '''
      }
    }
    success {
        withCredentials([usernameColonPassword(credentialsId: 'jaegertracing_gh_token', variable: 'AUTHTOKEN')]) {
        sh '''
          cd jenkins-ci
          ./push-logs.sh "SUCCESS"
        '''
      }
    }
  }
}
